syntax = "v1"

type (
	// User 服务相关请求和响应类型
	RegisterRequest {
		Username string `form:"username"`
		Password string `form:"password"`
		RealName string `form:"realName"`
		Phone    string `form:"phone"`
		Email    string `form:"email"`
	}
	LoginRequest {
		Username string `form:"username"`
		Password string `form:"password"`
	}
	LoginResponse {
		Token string `json:"token"`
	}
	LogoutRequest {
		Token    string `form:"token"`
		Username string `form:"username"`
	}
	GetUserRequest {
		Username string `form:"username"`
	}
	GetUserResponse {
		Username string `json:"username"`
		RealName string `json:"realName"`
		Phone    string `json:"phone"`
		Email    string `json:"email"`
	}
	IsExistUserRequest {
		Username string `form:"username"`
	}
	IsUserLoginRequest {
		Token    string `form:"token"`
		Username string `form:"username"`
	}
	UpsertUserInfoRequest {
		Username string `form:"username"`
		Password string `form:"password,optional"` // 添加 optional 关键字
		RealName string `form:"realName,optional"` // 添加 optional 关键字
		Phone    string `form:"phone,optional"` // 添加 optional 关键字
		Email    string `form:"email,optional"` // 添加 optional 关键字
	}
	DeleteUserRequest {
		Username string `form:"username"`
	}
	// Group 服务相关请求和响应类型
	CreateGroupRequest {
		Name     string `form:"name"`
		Username string `form:"username"`
	}
	CreateGroupResponse {
		Gid      string `json:"gid"`
		Name     string `json:"name"`
		Username string `json:"username"`
	}
	UpdateGroupRequest {
		Gid      string `form:"gid"`
		Name     string `form:"name"`
		Username string `form:"username"`
	}
	DeleteGroupRequest {
		Gid      string `form:"gid"`
		Username string `form:"username"`
	}
	GetGroupRequest {
		Username string `form:"username"`
	}
	GetGroupResponse {
		Data []GroupData `json:"data"`
	}
	GroupData {
		Gid      string `json:"gid"`
		Name     string `json:"name"`
		Username string `json:"username"`
	}
	// Shortlink 服务相关请求和响应类型
	ShortLinkCreateRequest {
		OriginUrl string `form:"origin_url"`
		Gid       string `form:"gid"`
		Describe  string `form:"describe"`
	}
	ShortLinkCreateResponse {
		OriginUrl string `json:"origin_url"`
	}
	ShortLinkUpdateRequest {
		Gid       string `form:"gid"`
		OriginUrl string `form:"origin_url"`
		ShortUri  string `form:"short_uri"`
		Describe  string `form:"describe"`
		Favicon   string `form:"favicon"`
		ClickNum  int64  `form:"clickNum"`
		TotalPv   int64  `form:"totalPv"`
		TotalUv   int64  `form:"totalUv"`
		TotalUip  int64  `form:"totalUip"`
		TodayPv   int64  `form:"todayPv"`
		TodayUv   int64  `form:"todayUv"`
		TodayUip  int64  `form:"todayUip"`
	}
	ShortLinkPageRequest {
		Gid      string `form:"gid"`
		Page     int64  `form:"page"`
		Size     int64  `form:"size"`
		OrderTag int64  `form:"orderTag"`
	}
	ShortLinkPageResponse {
		List    []ShortLinkPageData `json:"list"`
		Page    int64               `json:"page"`
		MaxPage int64               `json:"maxPage"`
		Total   int64               `json:"total"`
	}
	ShortLinkPageData {
		ShortUri     string `json:"short_uri"`
		FullShortUrl string `json:"full_short_url"`
		OriginUrl    string `json:"origin_url"`
		Gid          string `json:"gid"`
		EnableStatus int32  `json:"enable_status"`
		Describe     string `json:"describe"`
		ClickNum     string `json:"click_num"`
		Favicon      string `json:"favicon"`
		TotalPv      int32  `json:"total_pv"`
		TodayPv      int32  `json:"today_pv"`
		TotalUv      int32  `json:"total_uv"`
		TodayUv      int32  `json:"today_uv"`
		TotalUip     int32  `json:"total_uip"`
		TodayUip     int32  `json:"today_uip"`
		UpdateAt     string `json:"update_at"`
	}
	ShortLinkDeleteRequest {
		ShortUri  string `form:"shortUri"`
		OriginUrl string `form:"origin_url"`
	}
	ShortLinkRestoreRequest {
		ShortUri string `path:"shortUri"`
	}
	ShortLinkRestoreResponse {
		OriginUrl string `json:"originUrl"`
	}
	NilResponse {
		Nil string `json:"code"`
	}
	// 新增 RabbitMQ 测试相关请求和响应类型
	RabbitMQTestRequest {
		Message string `form:"message"`
		Queue   string `form:"queue,optional"` // 可选参数，默认队列名
	}
	RabbitMQTestResponse {
		Status  string `json:"status"`
		Message string `json:"message"`
	}
)

@server (
	prefix: /v1
	group:  user
)
service shortlink-api {
	@handler Register
	post /user/register (RegisterRequest) returns (NilResponse)

	@handler Login
	post /user/login (LoginRequest) returns (LoginResponse)

	@handler Logout
	post /user/logout (LogoutRequest) returns (NilResponse)

	@handler GetUserByUsername
	get /user/info (GetUserRequest) returns (GetUserResponse)

	@handler IsExistUser
	get /user/exist (IsExistUserRequest) returns (NilResponse)

	@handler IsUserLogin
	get /user/login-status (IsUserLoginRequest) returns (NilResponse)

	@handler UpsertUserInfo
	post /user/upsert (UpsertUserInfoRequest) returns (NilResponse)

	@handler DeleteUser
	post /user/delete (DeleteUserRequest) returns (NilResponse)

	@handler CreateGroup
	post /group/create (CreateGroupRequest) returns (CreateGroupResponse)

	@handler UpdateGroup
	post /group/update (UpdateGroupRequest) returns (NilResponse)

	@handler DeleteGroup
	post /group/delete (DeleteGroupRequest) returns (NilResponse)

	@handler GetGroupByUserName
	get /group/info (GetGroupRequest) returns (GetGroupResponse)
}

@server (
	prefix: /v1
	group:  shortlink
)
service shortlink-api {
	@handler CreateShortLink
	post /shortlink/create (ShortLinkCreateRequest) returns (ShortLinkCreateResponse)

	@handler UpdateShortLink
	post /shortlink/update (ShortLinkUpdateRequest) returns (NilResponse)

	@handler PageShortLink
	get /shortlink/page (ShortLinkPageRequest) returns (ShortLinkPageResponse)

	@handler DeleteShortLink
	post /shortlink/delete (ShortLinkDeleteRequest) returns (NilResponse)
}

@server (
	group: shortlink
)
service shortlink-api {
	@handler RestoreUrl
	get /:shortUri (ShortLinkRestoreRequest) returns (ShortLinkRestoreResponse)
}

@server (
	prefix: /v1
	group:  test
)
service shortlink-api {
	@handler TestRabbitMQ
	post /rabbitmq/send (RabbitMQTestRequest) returns (RabbitMQTestResponse)
}

